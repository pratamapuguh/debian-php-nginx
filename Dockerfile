FROM debian:stretch-slim

ARG BUILD_TIMEZONE=Asia/Jakarta
ENV TIMEZONE=$BUILD_TIMEZONE

ENV PHP_MEMORY_LIMIT    512M
ENV MAX_UPLOAD          50M
ENV PHP_MAX_FILE_UPLOAD 200
ENV PHP_MAX_POST        100M

ENV IGBINARY_VERSION    2.0.8
ENV PHPREDIS_VERSION    3.1.4
ENV PHPYAML_VERSION     1.3.1

# prevent Debian's PHP packages from being installed
# https://github.com/docker-library/php/pull/542
RUN set -eux; \
	{ \
		echo 'Package: php*'; \
		echo 'Pin: release *'; \
		echo 'Pin-Priority: -1'; \
	} > /etc/apt/preferences.d/no-debian-php

ENV BUILD_DEPS="zip unzip locales autoconf g++ gcc make git tzdata libmemcached-dev re2c file re2c dpkg-dev dpkg libc-dev pkgconf re2c"

ENV PHPIZE_DEPS \
		autoconf \
		dpkg-dev \
		file \
		g++ \
		gcc \
		libc-dev \
		pkg-config \
        libpcre3 \
        libpcre3-dev \
        zlib1g-dev \
        libssl-dev \
        zlib1g \
		re2c

# persistent / runtime deps
RUN set -eux; \
	apt-get update; \
	apt-get install -y --no-install-recommends \
		$PHPIZE_DEPS \
		ca-certificates \
		curl \
		xz-utils \
		tar \
	; \
	rm -rf /var/lib/apt/lists/*

ENV PHP_INI_DIR /usr/local/etc/php
RUN set -eux; \
	mkdir -p "$PHP_INI_DIR/conf.d"; \
# allow running as an arbitrary user (https://github.com/docker-library/php/issues/743)
	[ ! -d /var/www/html ]; \
	mkdir -p /var/www/html; \
	chown www-data:www-data /var/www/html; \
	chmod 777 /var/www/html

##<autogenerated>##
ENV PHP_EXTRA_CONFIGURE_ARGS --enable-fpm --with-fpm-user=www-data --with-fpm-group=www-data --disable-cgi
##</autogenerated>##

# Apply stack smash protection to functions using local buffers and alloca()
# Make PHP's main executable position-independent (improves ASLR security mechanism, and has no performance impact on x86_64)
# Enable optimization (-O2)
# Enable linker optimization (this sorts the hash buckets to improve cache locality, and is non-default)
# Adds GNU HASH segments to generated executables (this is used if present, and is much faster than sysv hash; in this configuration, sysv hash is also generated)
# https://github.com/docker-library/php/issues/272
# -D_LARGEFILE_SOURCE and -D_FILE_OFFSET_BITS=64 (https://www.php.net/manual/en/intro.filesystem.php)
ENV PHP_CFLAGS="-fstack-protector-strong -fpic -fpie -O2 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64"
ENV PHP_CPPFLAGS="$PHP_CFLAGS"
ENV PHP_LDFLAGS="-Wl,-O1 -Wl,--hash-style=both -pie"

ENV GPG_KEYS 1729F83938DA44E27BA0F4D3DBDB397470D12172 B1B44D8F021E4E2D6021E995DC9FF8D3EE5AF27F

ENV PHP_VERSION 7.2.24
ENV PHP_URL="https://www.php.net/get/php-7.2.24.tar.xz/from/this/mirror" PHP_ASC_URL="https://www.php.net/get/php-7.2.24.tar.xz.asc/from/this/mirror"
ENV PHP_SHA256="a6a6cc03388060aa5f8f9e45799b72bce1c7ed7b9d7b3f1187787202aad91d25" PHP_MD5=""

RUN mkdir ~/.gnupg && echo "disable-ipv6" >> ~/.gnupg/dirmngr.conf

RUN set -eux; \
	\
	savedAptMark="$(apt-mark showmanual)"; \
	apt-get update; \
	apt-get install -y --no-install-recommends gnupg dirmngr; \
	rm -rf /var/lib/apt/lists/*; \
	\
	mkdir -p /usr/src; \
	cd /usr/src; \
	\
	curl -fsSL -o php.tar.xz "$PHP_URL"; \
	\
	if [ -n "$PHP_SHA256" ]; then \
		echo "$PHP_SHA256 *php.tar.xz" | sha256sum -c -; \
	fi; \
	if [ -n "$PHP_MD5" ]; then \
		echo "$PHP_MD5 *php.tar.xz" | md5sum -c -; \
	fi; \
	\
	if [ -n "$PHP_ASC_URL" ]; then \
		curl -fsSL -o php.tar.xz.asc "$PHP_ASC_URL"; \
		export GNUPGHOME="$(mktemp -d)"; \
		for key in $GPG_KEYS; do \
			gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$key"; \
		done; \
		gpg --batch --verify php.tar.xz.asc php.tar.xz; \
		gpgconf --kill all; \
		rm -rf "$GNUPGHOME"; \
	fi; \
	\
	apt-mark auto '.*' > /dev/null; \
	apt-mark manual $savedAptMark > /dev/null; \
	apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false

COPY ./docker/docker-php-source /usr/local/bin/
RUN chmod +x /usr/local/bin/docker-php-source

RUN set -eux; \
	\
	savedAptMark="$(apt-mark showmanual)"; \
##<argon2-stretch>##
	sed -e 's/stretch/buster/g' /etc/apt/sources.list > /etc/apt/sources.list.d/buster.list; \
	{ \
		echo 'Package: *'; \
		echo 'Pin: release n=buster'; \
		echo 'Pin-Priority: -10'; \
		echo; \
		echo 'Package: libargon2*'; \
		echo 'Pin: release n=buster'; \
		echo 'Pin-Priority: 990'; \
	} > /etc/apt/preferences.d/argon2-buster; \
##</argon2-stretch>##
	apt-get update; \
	apt-get install -y \
		libargon2-dev \
		libcurl4-openssl-dev \
		libedit-dev \
		libsodium-dev \
		libsqlite3-dev \
		libssl-dev \
		libxml2-dev \
		zlib1g-dev \
        libmcrypt-dev \
        libfreetype6 \
        libfreetype6-dev \
        libwebp-dev \
        libjpeg62-turbo-dev \
        libpng-dev libxpm-dev \
		${PHP_EXTRA_BUILD_DEPS:-} \
	; \
	rm -rf /var/lib/apt/lists/*; \
	\
	export \
		CFLAGS="$PHP_CFLAGS" \
		CPPFLAGS="$PHP_CPPFLAGS" \
		LDFLAGS="$PHP_LDFLAGS" \
	; \
	docker-php-source extract; \
	cd /usr/src/php; \
	gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)"; \
	debMultiarch="$(dpkg-architecture --query DEB_BUILD_MULTIARCH)"; \
# https://bugs.php.net/bug.php?id=74125
	if [ ! -d /usr/include/curl ]; then \
		ln -sT "/usr/include/$debMultiarch/curl" /usr/local/include/curl; \
	fi; \
	./configure \
		--build="$gnuArch" \
		--with-config-file-path="$PHP_INI_DIR" \
		--with-config-file-scan-dir="$PHP_INI_DIR/conf.d" \
		\
# make sure invalid --configure-flags are fatal errors intead of just warnings
		--enable-option-checking=fatal \
		\
# https://github.com/docker-library/php/issues/439
		--with-mhash \
		\
# --enable-ftp is included here because ftp_ssl_connect() needs ftp to be compiled statically (see https://github.com/docker-library/php/issues/236)
		--enable-ftp \
# --enable-mbstring is included here because otherwise there's no way to get pecl to use it properly (see https://github.com/docker-library/php/issues/195)
		--enable-mbstring \
# --enable-mysqlnd is included here because it's harder to compile after the fact than extensions are (since it's a plugin for several extensions, not an extension in itself)
		--enable-mysqlnd \
# https://wiki.php.net/rfc/argon2_password_hash (7.2+)
		--with-password-argon2 \
# https://wiki.php.net/rfc/libsodium
		--with-sodium=shared \
# always build against system sqlite3 (https://github.com/php/php-src/commit/6083a387a81dbbd66d6316a3a12a63f06d5f7109)
		--with-pdo-sqlite=/usr \
		--with-sqlite3=/usr \
		\
		--with-curl \
		--with-libedit \
		--with-openssl \
		--with-zlib \
		\
# bundled pcre does not support JIT on s390x
# https://manpages.debian.org/stretch/libpcre3-dev/pcrejit.3.en.html#AVAILABILITY_OF_JIT_SUPPORT
		$(test "$gnuArch" = 's390x-linux-gnu' && echo '--without-pcre-jit') \
		--with-libdir="lib/$debMultiarch" \
		\
		${PHP_EXTRA_CONFIGURE_ARGS:-} \
	; \
	make -j "$(nproc)"; \
	find -type f -name '*.a' -delete; \
	make install; \
	find /usr/local/bin /usr/local/sbin -type f -executable -exec strip --strip-all '{}' + || true; \
	make clean; \
	\
# https://github.com/docker-library/php/issues/692 (copy default example "php.ini" files somewhere easily discoverable)
# copy php.ini process moved to before changing php configuration value
	cp -v php.ini-* "$PHP_INI_DIR/"; \
#   cp -v "$PHP_INI_DIR/php.ini-production" "$PHP_INI_DIR/php.ini"; \
	\
	cd /; \
	docker-php-source delete; \
	\
# reset apt-mark's "manual" list so that "purge --auto-remove" will remove all build dependencies
	apt-mark auto '.*' > /dev/null; \
	[ -z "$savedAptMark" ] || apt-mark manual $savedAptMark; \
	find /usr/local -type f -executable -exec ldd '{}' ';' \
		| awk '/=>/ { print $(NF-1) }' \
		| sort -u \
		| xargs -r dpkg-query --search \
		| cut -d: -f1 \
		| sort -u \
		| xargs -r apt-mark manual \
	; \
	apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \
	\
# update pecl channel definitions https://github.com/docker-library/php/issues/443
	pecl update-channels; \
	rm -rf /tmp/pear ~/.pearrc; \
# smoke test
	php --version

COPY ./docker/docker-php-ext-* /usr/local/bin/
RUN chmod +x /usr/local/bin/docker-php-ext-*


RUN curl -fsSL -o /tmp/${IGBINARY_VERSION}.tar.gz https://github.com/igbinary/igbinary/archive/${IGBINARY_VERSION}.tar.gz && \
    cd /tmp && \
    tar -xzvf ${IGBINARY_VERSION}.tar.gz && \
    cd igbinary-${IGBINARY_VERSION} && \
    phpize && ./configure CFLAGS="-O2 -g" --enable-igbinary && make && make install && \
    cd .. && rm -rf /tmp/igbinary-${IGBINARY_VERSION}/ && \
    echo 'extension=igbinary.so' >> ${PHP_INI_DIR}/conf.d/igbinary.ini && \
    \
    curl -fsSL -o /tmp/${PHPREDIS_VERSION}.tar.gz https://github.com/phpredis/phpredis/archive/${PHPREDIS_VERSION}.tar.gz && \
    cd /tmp && \
    tar -xzvf ${PHPREDIS_VERSION}.tar.gz && \
    cd /tmp/phpredis-${PHPREDIS_VERSION} && \
    phpize &&  ./configure --enable-redis-igbinary && make && make install && \
    cd .. && rm -rf /tmp/phpredis-${PHPREDIS_VERSION}/ && \
    echo 'extension=redis.so' >> ${PHP_INI_DIR}/conf.d/redis.ini

# sodium was built as a shared module (so that it can be replaced later if so desired), so let's enable it too (https://github.com/docker-library/php/issues/598)
RUN docker-php-ext-enable sodium

RUN set -eux; \
	cd /usr/local/etc; \
	if [ -d php-fpm.d ]; then \
		# for some reason, upstream's php-fpm.conf.default has "include=NONE/etc/php-fpm.d/*.conf"
		sed 's!=NONE/!=!g' php-fpm.conf.default | tee php-fpm.conf > /dev/null; \
		cp php-fpm.d/www.conf.default php-fpm.d/www.conf; \
	else \
		# PHP 5.x doesn't use "include=" by default, so we'll create our own simple config that mimics PHP 7+ for consistency
		mkdir php-fpm.d; \
		cp php-fpm.conf.default php-fpm.d/www.conf; \
		{ \
			echo '[global]'; \
			echo 'include=etc/php-fpm.d/*.conf'; \
		} | tee php-fpm.conf; \
	fi; \
	{ \
		echo '[global]'; \
		echo 'error_log = /proc/self/fd/2'; \
		echo; \
		echo '[www]'; \
		echo '; if we send this to /proc/self/fd/1, it never appears'; \
		echo 'access.log = /proc/self/fd/2'; \
		echo; \
		echo 'clear_env = no'; \
		echo; \
		echo '; Ensure worker stdout and stderr are sent to the main error log.'; \
		echo 'catch_workers_output = yes'; \
	} | tee php-fpm.d/docker.conf; \
	{ \
		echo '[global]'; \
		echo 'daemonize = no'; \
		echo; \
		echo '[www]'; \
		echo 'listen = 9000'; \
	} | tee php-fpm.d/zz-docker.conf


# install lib for php extension
RUN apt-get update; \
    apt-get install -y \
    libargon2-dev \
	libcurl4-openssl-dev \
	libedit-dev \
	libsodium-dev \
	libsqlite3-dev \
	libssl-dev \
	libxml2-dev \
	zlib1g-dev \
    libmcrypt-dev \
    libfreetype6 \
    libfreetype6-dev \
    libwebp-dev \
    libjpeg62-turbo-dev \
    libpng-dev libxpm-dev 

# Install various PHP extensions
RUN docker-php-ext-configure bcmath --enable-bcmath; \
    docker-php-ext-configure pcntl --enable-pcntl; \
    docker-php-ext-configure soap --enable-soap; \
    docker-php-ext-configure pdo_mysql --with-pdo-mysql; \
    docker-php-ext-install \
        bcmath \
        pcntl \
        soap \
        sockets \
        zip \
        opcache \
        mysqli \
        pdo_mysql \
  && docker-php-ext-configure gd \
    --with-jpeg-dir=/usr/lib \
    --with-freetype-dir=/usr/include/freetype2 && \
    docker-php-ext-install gd \
  && docker-php-ext-install opcache \
  && docker-php-ext-enable opcache


RUN  curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin/ --filename=composer && \
    sed -i "s/ -n / /" $(which pecl)

# COPY ./docker/php.ini $PHP_INI_DIR/php.ini
RUN mv $PHP_INI_DIR/php.ini-production $PHP_INI_DIR/php.ini

# tweak php-fpm config
RUN sed -i -e "s/;cgi.fix_pathinfo=1/cgi.fix_pathinfo=0/g" ${PHP_INI_DIR}/php.ini                                           && \
    sed -i "s|;*date.timezone =.*|date.timezone = ${TIMEZONE}|i" ${PHP_INI_DIR}/php.ini                                     && \
    sed -i "s|;*memory_limit =.*|memory_limit = ${PHP_MEMORY_LIMIT}|i" ${PHP_INI_DIR}/php.ini                               && \
    sed -i "s|;*upload_max_filesize =.*|upload_max_filesize = ${MAX_UPLOAD}|i" ${PHP_INI_DIR}/php.ini                       && \
    sed -i "s|;*max_file_uploads =.*|max_file_uploads = ${PHP_MAX_FILE_UPLOAD}|i" ${PHP_INI_DIR}/php.ini                    && \
    sed -i -e "s/post_max_size\s*=\s*8M/post_max_size = 100M/g" ${PHP_INI_DIR}/php.ini                                      && \
    sed -i -e "s/variables_order = \"GPCS\"/variables_order = \"EGPCS\"/g" ${PHP_INI_DIR}/php.ini                           && \
    sed -i -e "s/;daemonize\s*=\s*yes/daemonize = no/g" /usr/local/etc/php-fpm.conf                                         && \
    sed -i -e "s/error_log = \/var\/log\/php-fpm.log;/error_log = \/proc\/self\/fd\/2;/g" /usr/local/etc/php-fpm.conf       && \
    sed -i -e "s/;catch_workers_output\s*=\s*yes/catch_workers_output = yes/g" /usr/local/etc/php-fpm.conf                  && \
    sed -i -e "s/pm.max_children = 5/pm.max_children = 24/g" /usr/local/etc/php-fpm.conf                                     && \
    sed -i -e "s/pm.start_servers = 2/pm.start_servers = 5/g" /usr/local/etc/php-fpm.conf                                   && \
    sed -i -e "s/pm.min_spare_servers = 1/pm.min_spare_servers = 5/g" /usr/local/etc/php-fpm.conf                           && \
    sed -i -e "s/pm.max_spare_servers = 3/pm.max_spare_servers = 5/g" /usr/local/etc/php-fpm.conf                           && \
    sed -i -e "s/;pm.max_requests = 500/pm.max_requests = 200/g" /usr/local/etc/php-fpm.conf                                && \
    sed -i -e "s/user = nobody/user = www-data/g" /usr/local/etc/php-fpm.conf                                                  && \
    sed -i -e "s/group = nobody/group = www-data/g" /usr/local/etc/php-fpm.conf                                                && \
    sed -i -e "s/;listen.mode = 0660/listen.mode = 0666/g" /usr/local/etc/php-fpm.conf                                      && \
    sed -i -e "s/;listen.owner = nobody/listen.owner = www-data/g" /usr/local/etc/php-fpm.conf                                 && \
    sed -i -e "s/;listen.group = nobody/listen.group = www-data/g" /usr/local/etc/php-fpm.conf                                 && \
    sed -i -e "s/;pm.status_path = \/status/pm.status_path = \/status/g" /usr/local/etc/php-fpm.conf                           && \
    sed -i -e "s/;ping.path = \/ping/ping.path = \/ping/g" /usr/local/etc/php-fpm.conf                                         && \
    sed -i -e "s/;ping.response = pong /ping.response = pong g/g" /usr/local/etc/php-fpm.conf                                  && \
    sed -i -e "s/;opcache.enable_cli=.*/opcache.enable_cli=1/" ${PHP_INI_DIR}/php.ini                                        && \
    sed -i -e "s/;opcache.memory_consumption=.*/opcache.memory_consumption=512/" ${PHP_INI_DIR}/php.ini                      && \
    sed -i -e "s/;opcache.interned_strings_buffer=.*/opcache.interned_strings_buffer=8/" ${PHP_INI_DIR}/php.ini            && \ 
    sed -i -e "s/;opcache.max_accelerated_files=.*/opcache.max_accelerated_files=8192/" ${PHP_INI_DIR}/php.ini            && \ 
    sed -i -e "s/;opcache.revalidate_path=.*/opcache.revalidate_path=1/" ${PHP_INI_DIR}/php.ini                              && \ 
    sed -i -e "s/;opcache.fast_shutdown=.*/opcache.fast_shutdown=1/" ${PHP_INI_DIR}/php.ini                                  && \ 
    sed -i -e "s/;opcache.enable_file_override=.*/opcache.enable_file_override=1/" ${PHP_INI_DIR}/php.ini                    && \ 
    sed -i -e "s/;opcache.validate_timestamps=.*/;opcache.validate_timestamps=1/" ${PHP_INI_DIR}/php.ini                     && \ 
    sed -i -e "s/;opcache.revalidate_freq=.*/opcache.revalidate_freq=0/" ${PHP_INI_DIR}/php.ini                              && \ 
    rm -Rf /etc/nginx/conf.d/*                && \
    rm -Rf /etc/nginx/sites-available/default && \
    mkdir -p /etc/nginx/ssl/                  && \
    find ${PHP_INI_DIR}/conf.d/ -name "*.ini" -exec sed -i -re 's/^(\s*)#(.*)/\1;\2/g' {} \;


# Install custom nginx 
COPY ./docker/nginx-install.sh ./docker/nginx.patch /usr/local/src/
RUN /usr/local/src/nginx-install.sh \
  && rm -rf /usr/local/src

# Timezone
RUN ln -snf /usr/share/zoneinfo/Asia/Jakarta /etc/localtime \
 && echo Asia/Jakarta > /etc/timezone
#

# Language

ENV LC_ALL en_US.UTF-8
ENV LANG en_US.UTF-8
ENV LANGUAGE en_US:en

RUN apt-get update; \
    apt-get install -y locales

RUN locale-gen \
 sed -i 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/g' /etc/locale.gen \
 && locale-gen en_US.UTF-8
 
#

RUN apt-get install -y ansible; \
	rm -rf /var/lib/apt/lists/*
RUN echo "123123" > /tmp/.ansible

ADD ./docker/nginx.conf /etc/nginx/nginx.conf

RUN mkdir -p /var/www/vendor && \
    mkdir -p /var/cache/nginx/ && \
    chown -R www-data:www-data /var/cache/nginx/ && \
    touch /var/log/php-fpm.log && \
    chown -R www-data:www-data /var/www && \
    chown -R www-data:www-data /var/log/nginx/ && \
    chown -R www-data:www-data /var/run/nginx/ && \
    chown -R www-data:www-data /var/log/php-fpm.log

WORKDIR /var/www

COPY ./scripts/compress /bin/compress
RUN chmod +x /bin/compress

# s6 init
USER root
COPY ./docker/rootfs /

ADD ./scripts/entrypoint.sh /entrypoint.sh
RUN chmod +x /entrypoint.sh